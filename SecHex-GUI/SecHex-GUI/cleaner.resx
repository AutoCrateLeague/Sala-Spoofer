<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAACcAAAAnAAAAAAAAAAAA
        AABGGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0UbHv9FGx3/Rhsg/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsg/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9HGyb/Uxtd/1UbaP9JGy//Rhsg/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9JGy//Rhsi/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsg/0kbLf9pG8b/bhvi/04bR/9FGx//Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyD/Sxs4/14bkv9JGy3/Rhsg/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyD/SRst/2kbxv9uG+L/ThtH/0UbH/9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIP9bG4T/bhvd/04bRv9GGx//Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIP9JGy3/aRvG/24b4v9OG0f/RRsf/0Yb
        If9GGyH/Rhsh/0YbIf9GGx//ThtF/2wb1v9vG+b/UBtS/0UbHv9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsg/0kbLf9pG8b/bhvi/04b
        R/9FGx//Rhsh/0YbIf9GGyH/Rhsh/0cbJP9gG53/chvz/2Mbrf9QG1D/Rxsk/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyD/SRst/2kb
        xv9uG+L/ThtH/0UbH/9GGyH/Rhsh/0YbIf9FGx7/UhtZ/28b5P9tG9v/WRt7/2QbsP9KGzH/Rhsg/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        IP9JGy3/aRvG/24b4v9OG0f/RRsf/0YbIf9GGyH/Rhsg/0gbLP9lG7X/chvy/14bk/9hG6H/bxvm/1Ab
        T/9FGx7/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsg/0kbLf9pG8b/bhvi/04bR/9FGx//Rhsh/0YbIf9FGx//Vxtx/3Eb7P9qG87/TBs+/2Ib
        pP9yG/L/WRt6/0UbHv9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyD/SRst/2kbxv9uG+L/ThtH/0UbH/9GGyH/Rhsf/0sbOf9pG8r/cRvu/1gb
        d/9FGxz/WBt2/3Ib8v9jG6n/Rxsk/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIP9JGy3/aRvG/24b4v9OG0f/RRsf/0YbIf9GGyH/XBuK/3Ib
        8v9mG7r/SRsu/0UbHf9PG0v/bxvj/2sb0f9LGzf/Rhsg/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsg/0kbLf9pG8b/bhvi/04bR/9GGx//Rhsf/08b
        Sv9tG9r/cBvn/1QbZv9HGyb/Rxsm/0kbLv9oG8T/cBvq/1IbWv9FGx7/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyD/SRst/2kbxv9uG+L/ThtH/0Ub
        Hv9HGyb/YRuj/3Ib8f9vG+f/ZxvA/2Ybvf9gG5v/SBsq/18bmP9yG/T/XBuH/0YbH/9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIP9JGy3/aRvG/24b
        4v9OG0f/RRsc/1IbWv9uG97/cBvp/3Ab6P9wG+v/chvx/24b3/9NG0L/VRto/3Eb7/9lG7X/Rxsn/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsg/0kb
        Lf9pG8b/bhvi/04bR/9FGx7/TBs+/1IbWf9SG1j/UhtY/1IbWv9nG7z/cRvw/1YbbP9MGz//bRvc/20b
        2f9MGz//Rhsf/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyD/SRst/2kbxv9uG+L/ThtH/0YbH/9GGx//RRse/0UbHv9FGx7/RBsc/1obgv9yG/P/YBud/0gb
        Kf9mG7n/cRvu/1QbZf9FGx7/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIP9JGy3/aRvG/24b4v9OG0b/RRse/0YbIP9GGyD/Rhsg/0YbIP9FGx3/URtV/3Ab
        6P9pG8f/SRsu/1wbi/9yG/T/XhuU/0YbIP9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsg/0kbLf9pG8b/bxvj/1AbTv9IGyj/SBsq/0gbKv9IGyr/SBsq/0gb
        Kf9MGz3/axvQ/28b5f9PG0z/Uhtb/3Eb7P9nG8D/SBss/0YbIP9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyD/SRst/2gbxf9xG+3/aRvI/2cbvv9nG7//Zxu//2cb
        v/9nG7//Zxu//2cbwf9vG+L/cRvw/1gbef9LGzf/bBvU/24b4P9OG0j/Rhsf/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIP9JGy3/Zxu//3Ab6v9wG+n/cBvq/3Ab
        6v9wG+r/cBvq/3Ab6v9wG+r/cBvq/3Ab6P9xG+r/Yhuj/0cbKP9jG6r/cBvq/1Ybbf9FGx7/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0cbJP9PG0r/URtV/1Eb
        VP9RG1T/URtU/1EbVP9RG1T/URtU/1EbVP9RG1T/URtU/1EbVf9OG0n/Rhsj/0wbPv9RG1b/TBs7/0Yb
        IP9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Ub
        H/9FGx7/RRse/0UbHv9FGx7/RRse/0UbHv9FGx7/RRse/0UbHv9FGx7/RRse/0UbH/9GGyH/RRsf/0Ub
        Hv9GGyD/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0YbIf9GGyH/Rhsh/0Yb
        If9GGyH/Rhsh/0YbIf9GGyH/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>